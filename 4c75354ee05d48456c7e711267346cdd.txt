--[[ 
    Title: Dupe Tools + Candy Auto-Farm (Integrated & Robust)
    Description: Dupe Tools window (draggable, rounded, animated) with integrated Candy Auto-Farm panel and Fun / Miscellaneous panel. 
    Resilient against player resets.
]]

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local coreGui = game:GetService("StarterGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer
if not player then return end

local PlayerGui = player:WaitForChild("PlayerGui")

-- Disable default core GUIs
pcall(function() coreGui:SetCoreGuiEnabled(Enum.CoreGuiType.All, false) end)

-- =======================================================================================
-- GLOBAL CHARACTER HELPER (Robust against resets)
-- =======================================================================================
local function waitForCharacter()
    -- This function ensures we always retrieve the latest character and its parts, 
    -- waiting for the character to load if it's nil (i.e., during a respawn).
    local char = player.Character or player.CharacterAdded:Wait()
    local hrpPart = char:WaitForChild("HumanoidRootPart", 5)
    local humanoidInst = char:FindFirstChildOfClass("Humanoid")
    return char, hrpPart, humanoidInst
end


--// CONFIGURATION
local WINDOW_NAME = "Dupe Tools"
local INITIAL_WIDTH = 150 
local FINAL_SIZE = UDim2.new(0.25, 0, 0.35, 0)
local DEFAULT_SIZE = UDim2.new(0.25, 0, 0.35, 0) -- Stored default size
local TITLE_BAR_HEIGHT = 30
local BUTTON_SIZE = UDim2.new(0, 12, 0, 12)
local BUTTON_MARGIN = 8
local BUTTON_SPACING = 6
local CORNER_RADIUS = 10
local TRANSPARENCY = 0.3 -- slightly translucent -- Default transparency for other GUIs

local COLORS = {
	Main = Color3.fromRGB(2, 13, 33),
	TitleBar = Color3.fromRGB(12, 23, 50),
	Text = Color3.new(1, 1, 1),
	ButtonClose = Color3.fromRGB(255, 95, 86),
	ButtonMinimize = Color3.fromRGB(255, 189, 46),
	ButtonOther = Color3.fromRGB(39, 205, 64),
    ButtonBrainrotActive = Color3.fromRGB(120, 0, 0), -- Dark Red
    ButtonBrainrotInactive = Color3.fromRGB(30, 30, 30), -- Dark Gray/Black
}

local TWEEN_INFO = TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local TWEEN_INFO_FAST = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out) -- For dropdown and rainbow

--// GUI STATE FOR FULL-SCREEN TOGGLE
local fullScreen = false
local minimized = false
local debounce = false
local originalSize = DEFAULT_SIZE
local originalPosition = UDim2.new(0.5, 0, 0.5, 0) 

--// THEME STATE
local rainbowThemeActive = false
local rainbowTask = nil

-- Forward declare GUI elements needed in ApplyTheme
local MainFrame, Content, TitleBar, Title, Label 
local candyLauncher, funLauncher, settingsLauncher
local slidePanel, FunPanel, SettingsPanel 

-- =======================================================================================
-- 1. Brainrot Stealer Core Logic 
-- =======================================================================================
local BrainrotStealer = {}
-- ... (Brainrot Stealer code remains unchanged) ...
do
    -- CONFIG (from user's script)
    local DROP_REMOTE_PATH = {"Remotes", "DropBrainrotEvent"}
    local TARGET_Y = 10 -- Locked Y-axis coordinate (operational plane)
    local DROP_Y = -15 -- Target Y for the drop spot
    local DROP_COORDS = Vector3.new(-17.20, DROP_Y, -34.68) -- Dedicated drop spot
    local LOOP_DELAY = 0.6
    local TELEPORT_OFFSET = Vector3.new(0, 2, 0) -- Vertical offset for HRP above the ground plane
    local PROMPT_NAME = "Steal"

    -- State Management
    local running = false
    local stealTask = nil
    local currentRigBlock = nil
    local currentHighlight = nil
    
    -- Prefixes / suffixes for matching brainrots
    local PREFIXES = {"rainbow", "gold", "diamond", "undead"}
    local SUFFIXES = {
        "67","amalgamation","antonio","avocadini antilopini","ballerina","banantta","bobrito bandito",
        "boneca","brainrot god lucky block","brr brr patapim","bulbito bandito traktorito",
        "burbaloni luliloli","cacto hipopotamo","cappuccino","caramellino tricksterino",
        "chef crabracadabra","chimpanzini","crocodilo","dragon cannelloni","esok sekolah",
        "espresso signora","fantazmo cerebellino","frigo camelo","ganzanzelli","garama and madundung",
        "glorbo","gorillo","graipus","gusini","halloween 67","halloweeni pumpkini",
        "jackie o lanterno","job job job sahur","ketchuru and musturu","ketupat kepak",
        "liril√≠ larila","lololo","los primos","los tralaleritos","pakrahmatmamat","phantomina triorina",
        "pi pi watermelon","pot hotspot","pumpkino financini","rhino toasterino","saturno",
        "skelettino capitano","smurf cat","strawberrelli flamingelli","strawberry elephant",
        "ta sahur","tang tang keletang","tictac sahur","tigroligre frutonni","to to to sahur",
        "tralalero","tralalita tralala","trippi troppi","tung","udin dun","watermelunni",
        "witcharella spyderina","zibra zubra"
    }
    local normalizedSuffixes = {}
    for _, s in ipairs(SUFFIXES) do table.insert(normalizedSuffixes, s:lower()) end

    -- Cached drop remote
    local dropRemoteCache
    local function getDropRemote()
        if dropRemoteCache then return dropRemoteCache end
        local root = ReplicatedStorage
        for _, name in ipairs(DROP_REMOTE_PATH) do
            local child = root:FindFirstChild(name)
            if not child then return nil end
            root = child
        end
        dropRemoteCache = root
        return dropRemoteCache
    end

    -- Function to configure the prompt for infinite range and visibility
    local function configurePrompt(prompt)
        if prompt and prompt:IsA("ProximityPrompt") and prompt.Name == PROMPT_NAME then
            pcall(function()
                prompt.MaxActivationDistance = 1000000
                prompt.Exclusivity = Enum.ProximityPromptExclusivity.AlwaysShow
            end)
        end
    end

    -- Block Management
    local function updateRigBlock(hrpPart)
        if not currentRigBlock then
            local block = Instance.new("Part")
            block.Size = Vector3.new(10, 1, 10) -- 10x1x10 clipped block
            block.Material = Enum.Material.Plastic
            block.Color = Color3.fromRGB(200, 50, 50) -- Red
            block.Transparency = 0.5
            block.Anchored = true
            block.CanCollide = true -- Clipped/solid
            block.Name = "RigSupportBlock"
            block.Parent = workspace
            currentRigBlock = block
        end
        
        -- Position the block's center exactly at TARGET_Y, following HRP's X/Z
        local targetPos = Vector3.new(hrpPart.Position.X, TARGET_Y, hrpPart.Position.Z)
        currentRigBlock.CFrame = CFrame.new(targetPos) 
    end

    local function cleanupRigBlock()
        if currentRigBlock then
            currentRigBlock:Destroy()
            currentRigBlock = nil
        end
    end

    local function cleanupHighlight()
        if currentHighlight then
            currentHighlight:Destroy()
            currentHighlight = nil
        end
    end

    -- Tween helper with Y-lock
    local function tweenTo(position, time)
        -- Use the robust helper to get the latest character parts
        local _, hrpPart, humanoidInst = waitForCharacter() 
        if not hrpPart or not hrpPart:IsA("BasePart") or not humanoidInst then return end

        local yLock = position.Y
        if position.Y ~= DROP_Y then
            yLock = TARGET_Y
        end
        
        local lockedPosition = Vector3.new(position.X, yLock, position.Z) 
        
        local goal = {CFrame = CFrame.new(lockedPosition + TELEPORT_OFFSET)}
        local tweenInfo = TweenInfo.new(time, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        local tween = TweenService:Create(hrpPart, tweenInfo, goal)

        tween:Play()
        tween.Completed:Wait() 
    end

    -- Instant ProximityPrompt
    local function activatePromptInstant(prompt)
        if not prompt or not prompt:IsA("ProximityPrompt") then return false end
        local ok, err = pcall(function()
            local old = prompt.HoldDuration
            prompt.HoldDuration = 0
            prompt:InputHoldBegin()
            task.wait(0.03)
            prompt:InputHoldEnd()
            prompt.HoldDuration = old
        end)
        return ok, err
    end

    -- Name check
    local function nameMatchesAllowed(modelName)
        if not modelName or modelName == "" then return false end
        local lower = modelName:lower()
        for _, p in ipairs(PREFIXES) do
            if lower:find(p,1,true) then
                for _, suf in ipairs(normalizedSuffixes) do
                    if lower:find(suf,1,true) then return true end
                end
                if lower:find("67",1,true) then return true end
                return true
            end
        end
        for _, suf in ipairs(normalizedSuffixes) do
            if lower:find(suf,1,true) then return true end
        end
        return false
    end

    -- Find nearest ProximityPrompt
    local function findNearestAllowedPrompt()
        local _, hrpPart = waitForCharacter()
        local bestPrompt, bestDist
        if not hrpPart then return nil end

        for _, prompt in ipairs(workspace:GetDescendants()) do
            if prompt:IsA("ProximityPrompt") and prompt.Name == PROMPT_NAME then
                local parent = prompt.Parent
                if parent then
                    local model = parent
                    if model:IsA("BasePart") and parent.Parent and parent.Parent:IsA("Model") then
                        model = parent.Parent
                    end
                    local modelName = model.Name or (parent.Name or "")
                    if nameMatchesAllowed(modelName) then
                        local pivot
                        if parent:IsA("BasePart") then
                            pivot = parent.Position
                        elseif model:IsA("Model") then
                            if model.PrimaryPart and model.PrimaryPart:IsA("BasePart") then
                                pivot = model.PrimaryPart.Position
                            else
                                for _, d in ipairs(model:GetDescendants()) do
                                    if d:IsA("BasePart") then
                                        pivot = d.Position
                                        break
                                    end
                                end
                            end
                        end
                        if pivot then
                            local dist = (pivot - hrpPart.Position).Magnitude
                            if not bestDist or dist < bestDist then
                                bestDist = dist
                                bestPrompt = {prompt = prompt, pivot = pivot}
                            end
                        end
                    end
                end
            end
        end
        return bestPrompt
    end

    -- Core loop
    local function coreLoop()
        local dropRemote = getDropRemote()
        local _, hrpPart, humanoidInst = waitForCharacter()
        
        -- LOCK RIG: Prevent movement/falling and enforce sitting
        if humanoidInst then 
            humanoidInst.PlatformStand = true 
            humanoidInst.Sit = true 
        end

        -- Run the loop indefinitely until BrainrotStealer.Stop() is called
        while running do 
            local ok, err = pcall(function()
                -- Check for valid parts again inside the loop (redundant but safe)
                 local currentHrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
                 local currentHumanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
                if not currentHrp or not currentHumanoid or not currentHrp.Parent then 
                    error("Character parts lost during loop execution.") 
                end
                hrpPart = currentHrp -- Update references just in case
                humanoidInst = currentHumanoid
                
                -- 0. CONSTANTLY UPDATE SUPPORT BLOCK
                updateRigBlock(hrpPart)

                local found = findNearestAllowedPrompt()
                
                if found and found.prompt and found.prompt.Parent then -- Check prompt still exists
                    local targetModel = found.prompt.Parent:FindFirstAncestorOfClass("Model") or found.prompt.Parent
                    
                    -- 1. HIGHLIGHT TARGET
                    if currentHighlight then cleanupHighlight() end -- Cleanup previous highlight
                    currentHighlight = Instance.new("SelectionBox")
                    currentHighlight.Color3 = Color3.fromRGB(255, 255, 0) -- Bright Yellow
                    currentHighlight.LineThickness = 0.1
                    currentHighlight.Adornee = targetModel
                    currentHighlight.Parent = targetModel
                    
                    -- 2. Tween to brainrot (Moves to TARGET_Y=10)
                    tweenTo(found.pivot, 0.4)
                    task.wait(0.06)
                     if found.prompt and found.prompt.Parent then -- Check again before activating
                        activatePromptInstant(found.prompt)
                     else
                         warn("Prompt disappeared before activation")
                     end

                    -- 3. Tween to drop spot (Moves to DROP_Y=-15)
                    tweenTo(DROP_COORDS, 0.6)
                    task.wait(0.06)

                    -- 4. Fire drop remote
                    if dropRemote and dropRemote.FireServer then
                        pcall(function() dropRemote:FireServer() end)
                    end
                    
                    -- 5. CLEANUP HIGHLIGHT after cycle
                    cleanupHighlight()
                else
                    task.wait(0.6) -- Wait longer if nothing found
                end
            end)
            if not ok then warn("Error in BrainrotStealer coreLoop:", err) end
            -- Make sure character exists before waiting delay
             if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
                 warn("Character lost, stopping BrainrotStealer loop.")
                 break -- Exit loop if character is gone
             end
            task.wait(LOOP_DELAY)
        end
        
        -- Final cleanup when loop exits
        local _, _, finalHumanoid = waitForCharacter()
        if finalHumanoid then
           pcall(function()
                 finalHumanoid.PlatformStand = false
                finalHumanoid.Sit = false
           end)
        end
        cleanupRigBlock()
        cleanupHighlight()
    end

    -- Cleanup function called on stop/respawn
    local function performCleanup()
         pcall(function() -- Wrap in pcall for safety during cleanup
            local _, _, humanoidInst = waitForCharacter()
            if humanoidInst then
                humanoidInst.PlatformStand = false
                humanoidInst.Sit = false
            end
            cleanupRigBlock()
            cleanupHighlight()
         end)
    end

    -- API Functions for GUI control
    function BrainrotStealer.Start()
        if running then return end
        
        local char, hrpPart, humanoidInst = waitForCharacter()
        if not char or not hrpPart or not humanoidInst then
            warn("Failed to find character parts for Stealer. Bot cannot start.")
            return
        end
        running = true -- Set running to true only if character is valid
        -- Run the core logic in a separate thread
        stealTask = task.spawn(coreLoop)
    end

    function BrainrotStealer.Stop()
        if not running then return end
        running = false
        if stealTask then
            task.cancel(stealTask) 
            stealTask = nil
        end
        performCleanup() 
    end
    
    function BrainrotStealer.IsRunning()
        return running
    end
    
    -- INITIAL PROMPT SETUP & CHARACTER REMOVAL HOOK
    pcall(function() -- Wrap initial setup in pcall
        for _, prompt in ipairs(workspace:GetDescendants()) do
            configurePrompt(prompt)
        end
        workspace.DescendantAdded:Connect(function(desc)
            if desc:IsA("ProximityPrompt") and desc.Name == PROMPT_NAME then
                configurePrompt(desc)
            end
        end)
    end)
    -- Stop the bot when the character is lost
    player.CharacterRemoving:Connect(function()
        if BrainrotStealer.IsRunning() then -- Only stop if it was running
            BrainrotStealer.Stop()
        end
    end)
end


--// GUI CREATION
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "TrafficLightGUI"
ScreenGui.ResetOnSpawn = false -- Keep the GUI instance on reset
ScreenGui.IgnoreGuiInset = true
ScreenGui.Parent = PlayerGui

MainFrame = Instance.new("Frame") -- Assign to forward-declared variable
MainFrame.Name = WINDOW_NAME
MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
MainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
MainFrame.Size = UDim2.new(0, INITIAL_WIDTH, 0, TITLE_BAR_HEIGHT + 10)
MainFrame.BackgroundColor3 = COLORS.Main
MainFrame.BackgroundTransparency = 1
MainFrame.BorderSizePixel = 0
MainFrame.ClipsDescendants = true
MainFrame.Parent = ScreenGui
Instance.new("UICorner", MainFrame).CornerRadius = UDim.new(0, CORNER_RADIUS)

--// TITLE BAR
TitleBar = Instance.new("Frame") -- Assign to forward-declared variable
TitleBar.Name = "TitleBar"
TitleBar.Size = UDim2.new(1, 0, 0, TITLE_BAR_HEIGHT)
TitleBar.BackgroundColor3 = COLORS.TitleBar
TitleBar.BackgroundTransparency = 1
TitleBar.BorderSizePixel = 0
TitleBar.ZIndex = 2
TitleBar.Active = true 
TitleBar.Parent = MainFrame
Instance.new("UICorner", TitleBar).CornerRadius = UDim.new(0, CORNER_RADIUS)

Title = Instance.new("TextLabel") -- Assign to forward-declared variable
Title.Text = WINDOW_NAME
Title.AnchorPoint = Vector2.new(0.5, 0)
Title.Position = UDim2.new(0.5, 0, 0, 0)
Title.Size = UDim2.new(1, -80, 1, 0)
Title.BackgroundTransparency = 1
Title.TextColor3 = COLORS.Text
Title.Font = Enum.Font.SourceSansBold
Title.TextSize = 16
Title.TextTransparency = 1
Title.ZIndex = 3
Title.Parent = TitleBar

--// BUTTON CREATOR
local function makeButton(name, color, tooltipText, index)
	local Button = Instance.new("TextButton")
	Button.Name = name .. "Button"
	Button.Size = BUTTON_SIZE
	Button.Position = UDim2.new(0, BUTTON_MARGIN + (index - 1) * (BUTTON_SIZE.X.Offset + BUTTON_SPACING), 0.5, -6)
	Button.BackgroundColor3 = color
	Button.BorderSizePixel = 0
	Button.AutoButtonColor = false
	Button.Text = ""
	Button.BackgroundTransparency = 1
	Button.ZIndex = 4
	Button.Parent = TitleBar

	Instance.new("UICorner", Button).CornerRadius = UDim.new(1, 0)

	local Tooltip = Instance.new("TextLabel")
	Tooltip.Size = UDim2.new(0, 100, 0, 20)
	Tooltip.Position = UDim2.new(0.5, -50, 0, 18)
	Tooltip.BackgroundTransparency = 1
	Tooltip.TextColor3 = Color3.new(1, 1, 1)
    Tooltip.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
	Tooltip.Font = Enum.Font.SourceSans
	Tooltip.TextSize = 13
	Tooltip.Text = tooltipText
	Tooltip.Visible = false
	Tooltip.TextTransparency = 1
	Tooltip.ZIndex = 5
    Tooltip.Name = "TooltipLabel"
	Tooltip.Parent = Button

	Button.MouseEnter:Connect(function()
		Tooltip.Visible = true
		TweenService:Create(Tooltip, TweenInfo.new(0.15), {BackgroundTransparency = 0, TextTransparency = 0}):Play()
	end)

	Button.MouseLeave:Connect(function()
		TweenService:Create(Tooltip, TweenInfo.new(0.15), {BackgroundTransparency = 1, TextTransparency = 1}):Play()
		task.delay(0.15, function() if Tooltip and Tooltip.Parent then Tooltip.Visible = false end end) -- Add check
	end)

	return Button
end

local Red = makeButton("Close", COLORS.ButtonClose, "Close", 1)
local Yellow = makeButton("Minimize", COLORS.ButtonMinimize, "Minimize", 2)
local Green = makeButton("Maximize", COLORS.ButtonOther, "Full-Screen Mode", 3) 

--// CONTENT FRAME (main area)
Content = Instance.new("Frame") -- Assign to forward-declared variable
Content.Size = UDim2.new(1, 0, 1, -TITLE_BAR_HEIGHT)
Content.Position = UDim2.new(0, 0, 0, TITLE_BAR_HEIGHT)
Content.BackgroundColor3 = COLORS.Main
Content.BackgroundTransparency = TRANSPARENCY
Content.BorderSizePixel = 0
Content.ZIndex = 1
Content.Parent = MainFrame
Content.ClipsDescendants = true

Label = Instance.new("TextLabel") -- Assign to forward-declared variable
Label.Size = UDim2.new(1, 0, 1, 0)
Label.BackgroundTransparency = 1
Label.Text = "" 
Label.TextColor3 = Color3.new(1, 1, 1)
Label.Font = Enum.Font.SourceSans
Label.TextSize = 20
Label.TextTransparency = 1
Label.ZIndex = 2
Label.Parent = Content

-- Create a top-level UI container inside Content for controls
local ControlsFrame = Instance.new("Frame")
ControlsFrame.Size = UDim2.new(1, -20, 1, -20)
ControlsFrame.Position = UDim2.new(0, 10, 0, 10)
ControlsFrame.BackgroundTransparency = 1
ControlsFrame.Parent = Content

-- Layout for ControlsFrame
local controlsLayout = Instance.new("UIListLayout")
controlsLayout.FillDirection = Enum.FillDirection.Vertical
controlsLayout.SortOrder = Enum.SortOrder.LayoutOrder
controlsLayout.Padding = UDim.new(0, 8)
controlsLayout.Parent = ControlsFrame

-- Simple helper to create buttons in ControlsFrame
local function createControlButton(text, width)
	local btn = Instance.new("TextButton")
	btn.Size = UDim2.new(0, width or 180, 0, 36)
	btn.BackgroundTransparency = 0
	btn.BackgroundColor3 = Color3.fromRGB(40, 40, 48)
	btn.TextColor3 = Color3.new(1, 1, 1)
	btn.Font = Enum.Font.SourceSansBold
	btn.TextSize = 14
	btn.Text = text
	Instance.new("UICorner", btn).CornerRadius = UDim.new(0,6)
	btn.Parent = ControlsFrame
	return btn
end

-- MAIN CONTROL BUTTONS
candyLauncher = createControlButton("Candy Auto-Farm", 200) -- Assign
funLauncher = createControlButton("Fun / Miscellaneous", 200) -- Assign
settingsLauncher = createControlButton("Settings", 200) -- Assign

--// DRAGGING FIXED
do
    local dragging = false
    local dragStart = Vector2.zero
    local startPos = UDim2.new()
    local dragConnection = nil -- Store connection to disconnect properly

    local function moveFrame(inputPos)
        local delta = inputPos - dragStart
        MainFrame.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end
    
    local function endDrag()
         dragging = false
        if dragConnection then
            dragConnection:Disconnect()
            dragConnection = nil
        end
    end

    TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
            
             -- Disconnect previous connection if it exists
            if dragConnection then
                 dragConnection:Disconnect()
            end

            -- Handle movement
            dragConnection = UserInputService.InputChanged:Connect(function(moveInput)
                if dragging and (moveInput.UserInputType == Enum.UserInputType.MouseMovement or moveInput.UserInputType == Enum.UserInputType.Touch) then
                    moveFrame(moveInput.Position)
                end
            end)
            
             -- Handle release using InputEnded on the specific input object
             input.Changed:Connect(function()
                 if input.UserInputState == Enum.UserInputState.End then
                     endDrag()
                 end
             end)
        end
    end)
    
     -- Handle cases where input ends unexpectedly (e.g., focus lost)
     UserInputService.InputEnded:Connect(function(input)
         if dragging and (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
             endDrag()
         end
     end)
end

-- =======================================================================================
-- 3. Panel Management and UI Wire-up
-- =======================================================================================
local funPanelOpen = false 
local panelOpen = false
local settingsPanelOpen = false -- NEW
local panelAnimationTime = 0.35

-- Forward declare
local function closePanel() end
local function closeFunPanel() end
local function closeSettingsPanel() end

function closeFunPanel() 
	if FunPanel and funPanelOpen then
		-- Slide back to right off-screen
		TweenService:Create(FunPanel, TWEEN_INFO, {
			Position = UDim2.new(1, 0, 0, TITLE_BAR_HEIGHT)
		}):Play()
		funPanelOpen = false
	end
end

local function openFunPanel() 
	if funPanelOpen then return end
	if panelOpen then closePanel() end
    if settingsPanelOpen then closeSettingsPanel() end -- NEW
	
	local currentFrameWidth = MainFrame.AbsoluteSize.X
	local newPanelWidth = math.floor(currentFrameWidth * 0.6)
	if FunPanel then FunPanel.Size = UDim2.new(0, newPanelWidth, 1, -TITLE_BAR_HEIGHT) end
	
	-- Slide to the left by the panel's width
	if FunPanel then
        TweenService:Create(FunPanel, TWEEN_INFO, {
            Position = UDim2.new(1, -newPanelWidth, 0, TITLE_BAR_HEIGHT)
        }):Play()
        funPanelOpen = true
    end
end

local function openPanel() -- Candy Panel
	if panelOpen then return end
	if funPanelOpen then closeFunPanel() end
    if settingsPanelOpen then closeSettingsPanel() end -- NEW
	
	local currentFrameWidth = MainFrame.AbsoluteSize.X
	local panelWidth = math.floor(currentFrameWidth * 0.6)
	if slidePanel then slidePanel.Size = UDim2.new(0, panelWidth, 1, -TITLE_BAR_HEIGHT) end
	
	if slidePanel then
        TweenService:Create(slidePanel, TweenInfo.new(panelAnimationTime, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = UDim2.new(0, 0, 0, TITLE_BAR_HEIGHT)}):Play()
        panelOpen = true
    end
end

function closePanel() -- Candy Panel
	if not panelOpen then return end
	if slidePanel then TweenService:Create(slidePanel, TweenInfo.new(panelAnimationTime, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {Position = UDim2.new(-1, 0, 0, TITLE_BAR_HEIGHT)}):Play() end
	panelOpen = false
end

-- NEW FUNCTIONS for Settings Panel
function closeSettingsPanel()
    if not settingsPanelOpen or not SettingsPanel then return end
    TweenService:Create(SettingsPanel, TweenInfo.new(panelAnimationTime, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {
        Size = UDim2.new(1, 0, 0, 0)
    }):Play()
    settingsPanelOpen = false
    
    -- Ensure dropdown is hidden when closing settings
    local settingsPad = SettingsPanel:FindFirstChild("settingsPad")
    if settingsPad then
        local dropdownList = settingsPad:FindFirstChild("DropdownList")
        if dropdownList then 
            dropdownList.Visible = false 
            dropdownList.Size = UDim2.new(0, 220, 0, 0) -- Reset size
        end
        local themeBtn = settingsPad:FindFirstChild("ThemeDropdownButton")
        if themeBtn then themeBtn.Text = "Change Theme / Color V" end -- Reset arrow
    end
end

local function openSettingsPanel()
    if settingsPanelOpen or not SettingsPanel then return end
    -- Close other panels
    if panelOpen then closePanel() end
    if funPanelOpen then closeFunPanel() end
    
    -- Animate open
    TweenService:Create(SettingsPanel, TweenInfo.new(panelAnimationTime, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
        Size = UDim2.new(1, 0, 1, -TITLE_BAR_HEIGHT)
    }):Play()
    settingsPanelOpen = true
end


-- ===============================================================================
-- // BUTTON LOGIC (FIXED FOR ROBUSTNESS ACROSS STATES)
-- ===============================================================================

local guiElements = {TitleBar, Content, Title, Label, Red, Yellow, Green, MainFrame, candyLauncher, funLauncher, settingsLauncher}
-- This list needs to include the back buttons from the panels for the fade out
task.wait() -- wait for panels to be created
if slidePanel then 
    local pad = slidePanel:FindFirstChild("pad")
    if pad then
        local backBtn = pad:FindFirstChildOfClass("TextButton")
        if backBtn then table.insert(guiElements, backBtn) end
    end
end
if FunPanel then 
     local pad = FunPanel:FindFirstChild("funPad")
     if pad then
        local backBtn = pad:FindFirstChildOfClass("TextButton")
        if backBtn then table.insert(guiElements, backBtn) end
     end
end
-- SettingsPanel buttons will be added when it's created


Red.MouseButton1Click:Connect(function()
	if debounce then return end
	debounce = true
    
    -- Stop all bots on close
    BrainrotStealer.Stop()
    Candy.Stop()
    rainbowThemeActive = false -- Stop rainbow theme
    if rainbowTask then task.cancel(rainbowTask); rainbowTask = nil end
    
	local fadeOut = TweenInfo.new(0.6, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)
    
    -- Fade out all necessary elements (guiElements gets populated fully later)
    task.delay(0.1, function() -- Delay slightly to ensure settings buttons are added
        -- Create a copy to iterate over, as guiElements might change during fade? (unlikely but safe)
        local elementsToFade = {}
        for _, obj in ipairs(guiElements) do table.insert(elementsToFade, obj) end
        
        for _, obj in ipairs(elementsToFade) do
            if obj and obj.Parent then -- Check if object exists and has a parent
                if obj:IsA("TextLabel") or obj:IsA("TextButton") then
                    pcall(function() TweenService:Create(obj, fadeOut, {TextTransparency = 1}):Play() end) 
                end
                if obj:IsA("Frame") or obj:IsA("TextButton") or obj:IsA("ImageButton") or obj:IsA("ScrollingFrame") then -- Include ScrollingFrame
                     pcall(function() TweenService:Create(obj, fadeOut, {BackgroundTransparency = 1}):Play() end)
                end
                 if obj:IsA("ImageButton") then -- Fade image too
                     pcall(function() TweenService:Create(obj, fadeOut, {ImageTransparency = 1}):Play() end)
                end
            end
        end
    end)
    
	task.wait(0.7) -- Increased wait time
	if ScreenGui and ScreenGui.Parent then -- Check if still valid before destroying
		ScreenGui:Destroy()
	end
end)

Yellow.MouseButton1Click:Connect(function()
	if debounce then return end
	debounce = true
    
    -- Close any open panels before minimizing
    if panelOpen then closePanel() end
    if funPanelOpen then closeFunPanel() end
    if settingsPanelOpen then closeSettingsPanel() end -- NEW
    
    -- Exit full screen if active before minimizing
    if fullScreen then
        Green.MouseButton1Click:Fire()
        task.wait(TWEEN_INFO.Time)
    end
    
	local goal = {}
    local currentWidth = MainFrame.Size.X
	if minimized then
		goal.Size = DEFAULT_SIZE -- Use DEFAULT_SIZE to restore
        TweenService:Create(Content, TWEEN_INFO, {BackgroundTransparency = TRANSPARENCY}):Play()
        TweenService:Create(Label, TWEEN_INFO, {TextTransparency = 0}):Play()
	else
		goal.Size = UDim2.new(currentWidth.Scale, currentWidth.Offset, 0, TITLE_BAR_HEIGHT)
        TweenService:Create(Content, TWEEN_INFO, {BackgroundTransparency = 1}):Play()
        TweenService:Create(Label, TWEEN_INFO, {TextTransparency = 1}):Play()
	end
    
	TweenService:Create(MainFrame, TWEEN_INFO, goal):Play()
	minimized = not minimized
	task.delay(TWEEN_INFO.Time, function() debounce = false end)
end)

-- Green Button Logic (HANDLES TOGGLE AND TOOLTIP)
Green.MouseButton1Click:Connect(function()
    if debounce then return end
    debounce = true
    
    local tooltip = Green:FindFirstChild("TooltipLabel")
    
    -- Cannot go full screen while minimized
    if minimized then
        Yellow.MouseButton1Click:Fire()
        task.wait(TWEEN_INFO.Time)
    end

    local targetSize
    local targetPosition

    if not fullScreen then
        -- 1. Go to Full-Screen Mode
        -- Store the current size and position before changing
        originalSize = MainFrame.Size
        originalPosition = MainFrame.Position

        targetSize = UDim2.new(1, 0, 1, 0)
        targetPosition = UDim2.new(0.5, 0, 0.5, 0) -- Centered for full screen
        
        TweenService:Create(TitleBar, TWEEN_INFO, {BackgroundTransparency = 0.5}):Play() 
        fullScreen = true
        if tooltip then tooltip.Text = "Restore Down" end -- Tooltip update
    else
        -- 2. Go back to Original Size (Toggle Off)
        targetSize = originalSize
        targetPosition = originalPosition
        
        TweenService:Create(TitleBar, TWEEN_INFO, {BackgroundTransparency = TRANSPARENCY}):Play() 
        fullScreen = false
        if tooltip then tooltip.Text = "Full-Screen Mode" end -- Tooltip update
    end

    -- Tween the frame size and position
    local tween = TweenService:Create(MainFrame, TWEEN_INFO, {
        Size = targetSize,
        Position = targetPosition
    })
    
    tween:Play()

    -- Release debounce after tween completion
    tween.Completed:Wait()
    
    -- If panels are open, update their size/position now that MainFrame size has changed
    if panelOpen or funPanelOpen then
        local newWidth = math.floor(MainFrame.AbsoluteSize.X * 0.6)
        if slidePanel then
            slidePanel.Size = UDim2.new(0, newWidth, 1, -TITLE_BAR_HEIGHT)
            if panelOpen then
                slidePanel.Position = UDim2.new(0, 0, 0, TITLE_BAR_HEIGHT) -- Reposition if open
            end
        end
        if FunPanel then
            FunPanel.Size = UDim2.new(0, newWidth, 1, -TITLE_BAR_HEIGHT)
            if funPanelOpen then
                FunPanel.Position = UDim2.new(1, -newWidth, 0, TITLE_BAR_HEIGHT) -- Reposition if open
            end
        end
    end
    -- NEW: Resize settings panel if open
    if settingsPanelOpen and SettingsPanel then
        SettingsPanel.Size = UDim2.new(1, 0, 1, -TITLE_BAR_HEIGHT)
    end
    
    task.delay(0.1, function() debounce = false end)
end)


--// STARTUP ANIMATION
local function animateStartup()
	local intro = Instance.new("TextLabel")
	intro.Size = UDim2.new(1, 0, 1, 0)
	intro.BackgroundTransparency = 1
	intro.Text = WINDOW_NAME
	intro.TextColor3 = Color3.new(1, 1, 1)
	intro.Font = Enum.Font.Fantasy
	intro.TextSize = 26
	intro.TextTransparency = 1
	intro.ZIndex = 10
	intro.Parent = MainFrame

	TweenService:Create(MainFrame, TweenInfo.new(0.4), {BackgroundTransparency = TRANSPARENCY}):Play()
	TweenService:Create(intro, TweenInfo.new(0.4), {TextTransparency = 0}):Play()
	task.wait(0.8)

	TweenService:Create(MainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {Size = DEFAULT_SIZE}):Play()
	task.wait(0.25)

	TweenService:Create(intro, TweenInfo.new(0.3), {TextTransparency = 1}):Play()
	task.wait(0.2)
	 if intro and intro.Parent then intro:Destroy() end -- Add check before destroying

	for _, obj in ipairs({TitleBar, Content, Title, Label, Red, Yellow, Green}) do
		if obj:IsA("TextLabel") or obj:IsA("TextButton") then
			TweenService:Create(obj, TWEEN_INFO, {TextTransparency = 0}):Play()
		end
		if obj:IsA("Frame") or obj:IsA("TextButton") then
			TweenService:Create(obj, TWEEN_INFO, {BackgroundTransparency = obj.BackgroundTransparency == 1 and TRANSPARENCY or obj.BackgroundTransparency}):Play()
		end
	end
    
    -- Also fade in the main control buttons
    TweenService:Create(candyLauncher, TWEEN_INFO, {TextTransparency = 0, BackgroundTransparency = 0}):Play()
    TweenService:Create(funLauncher, TWEEN_INFO, {TextTransparency = 0, BackgroundTransparency = 0}):Play()
    TweenService:Create(settingsLauncher, TWEEN_INFO, {TextTransparency = 0, BackgroundTransparency = 0}):Play()
end

animateStartup()

-- =======================================================================================
-- 2. Candy Autofarm CORE (embedded)
-- =======================================================================================
local Candy = {}
-- ... (Candy Autofarm code remains unchanged) ...
do
	-- Config & state
	local running = false
	local visitedCount = 0
	local tweenSpeed = 0.1
	local stayDelay = 0
	local stopwatchStart = 0
	local stopwatchRunning = false

	-- Selection highlight helper
	local function highlightPart(part)
        if not part or not part.Parent then return nil end -- Add check
		local box = Instance.new("SelectionBox")
		box.Adornee = part
		box.LineThickness = 0.05
		box.Color3 = Color3.fromRGB(255, 0, 0)
		box.SurfaceTransparency = 0.5
		box.Parent = workspace -- Consider parenting to part or PlayerGui for better cleanup
		box.Adornee = part
		return box
	end

	local function getCandyParts()
		local parts = {}
		local function collect(folder)
			if not folder then return end
			for _, obj in ipairs(folder:GetChildren()) do
                 -- Add checks to ensure parts are valid
				if obj:IsA("BasePart") and obj.Parent then
					table.insert(parts, obj)
				elseif obj:IsA("Model") and obj.Parent then
					local main = obj:FindFirstChildWhichIsA("BasePart")
					if main and main.Parent then table.insert(parts, main) end
				end
			end
		end
		collect(workspace:FindFirstChild("CandyPickups"))
		collect(workspace:FindFirstChild("CandySpawns"))
		return parts
	end

	local function tweenToCandy(candyPart)
        -- Use the robust helper to get the latest character parts
        local _, hrp, humanoid = waitForCharacter()
        if not hrp or not humanoid or not candyPart or not candyPart:IsDescendantOf(game) then return end -- Check candyPart validity

        local fixedY = hrp.Position.Y
		
		humanoid.Sit = true
		local box = highlightPart(candyPart)
		local tweenInfo = TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear)
		local targetPos = Vector3.new(candyPart.Position.X, fixedY, candyPart.Position.Z)
        
        -- Wrap Tween creation in pcall
        local tweenSuccess, tween = pcall(TweenService.Create, TweenService, hrp, tweenInfo, {CFrame = CFrame.new(targetPos)})
		if not tweenSuccess then
            warn("Failed to create tween for candy:", candyPart and candyPart.Name)
            if box and box.Parent then box:Destroy() end
            humanoid.Sit = false -- Unsit if tween fails
            return
        end
        
		tween:Play()
        
        local completedOk = pcall(function() tween.Completed:Wait() end) -- Wait safely
        
		if box and box.Parent then box:Destroy() end -- Cleanup box regardless of tween completion status
        
        if completedOk then -- Only count if tween completed successfully
		    visitedCount = visitedCount + 1
		    if stayDelay > 0 then task.wait(stayDelay) end
        else
            warn("Tween to candy interrupted or failed:", candyPart and candyPart.Name)
            -- Attempt to unsit even if tween failed
            if humanoid and humanoid.Parent then humanoid.Sit = false end
        end
	end

	local farmThread
    local function performCleanup()
        pcall(function() -- Wrap cleanup in pcall
            local _, _, humanoidInst = waitForCharacter()
            if humanoidInst then
                humanoidInst.Sit = false
            end
            stopwatchRunning = false
        end)
    end
    
	function Candy.Start()
		if running then return end
		
        local char, hrp, humanoid = waitForCharacter()
        if not char or not hrp or not humanoid then
            warn("Cannot start Candy farm: Character not found.")
            return
        end
        
        running = true
		visitedCount = 0
		stopwatchStart = os.clock()
		stopwatchRunning = true

		farmThread = task.spawn(function()
			while running do
                if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
                    warn("Character lost during Candy farm loop.")
                    break -- Exit loop if character is gone
                end
                
				local candies = getCandyParts()
				if #candies == 0 then
					task.wait(1)
				else
					for _, candy in ipairs(candies) do
						if not running then break end
						if candy and candy.Parent then -- Check candy validity
							pcall(tweenToCandy, candy)
						end
					end
				end
				task.wait(0.05)
			end
            performCleanup()
		end)
	end

	function Candy.Stop()
		if not running then return end
		running = false
        if farmThread then
            task.cancel(farmThread)
            farmThread = nil
        end
		performCleanup()
		-- visitedCount preserved
	end

	function Candy.IsRunning()
		return running
	end

	function Candy.GetVisited()
		return visitedCount
	end

	function Candy.SetTweenSpeed(val)
		tweenSpeed = math.clamp(tonumber(val) or 0.1, 0, 1) -- Ensure conversion to number
	end

	function Candy.SetStayDelay(val)
		stayDelay = math.clamp(tonumber(val) or 0, 0, 1) -- Ensure conversion to number
	end

	function Candy.GetStopwatch()
		if stopwatchRunning and stopwatchStart > 0 then
			return os.clock() - stopwatchStart
		elseif stopwatchStart > 0 then -- This condition seems redundant, maybe intended !stopwatchRunning?
			return 0 -- Should perhaps return elapsed time when stopped? Let's keep it simple.
		else
			return 0
		end
	end

    -- Hook into character removal (safety stop)
     player.CharacterRemoving:Connect(function()
         if Candy.IsRunning() then
             Candy.Stop()
         end
     end)
end

-- =======================================================================================
-- 4. Candy Panel (LEFT Slide) UI
-- =======================================================================================
do
	local panelWidth = math.floor( (MainFrame.AbsoluteSize.X) * 0.6 ) 
	slidePanel = Instance.new("Frame") -- Assign
	slidePanel.Name = "CandyPanel"
	slidePanel.BackgroundColor3 = Color3.fromRGB(20, 20, 24)
	slidePanel.Size = UDim2.new(0, panelWidth, 1, -TITLE_BAR_HEIGHT)
	slidePanel.Position = UDim2.new(-1, 0, 0, TITLE_BAR_HEIGHT)
	slidePanel.BorderSizePixel = 0
	slidePanel.ClipsDescendants = true
	slidePanel.Parent = MainFrame
	Instance.new("UICorner", slidePanel).CornerRadius = UDim.new(0, 8)

	local pad = Instance.new("Frame")
    pad.Name = "pad"
	pad.Size = UDim2.new(1, -16, 1, -16)
	pad.Position = UDim2.new(0, 8, 0, 8)
	pad.BackgroundTransparency = 1
	pad.Parent = slidePanel

	local panelLayout = Instance.new("UIListLayout")
	panelLayout.Padding = UDim.new(0, 8)
	panelLayout.FillDirection = Enum.FillDirection.Vertical
	panelLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	panelLayout.VerticalAlignment = Enum.VerticalAlignment.Top
	panelLayout.Parent = pad

	-- UI Elements in slider panel
	local backBtn = Instance.new("TextButton")
	backBtn.Size = UDim2.new(0, 220, 0, 36) 
	backBtn.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
	backBtn.TextColor3 = Color3.new(1, 1, 1)
	backBtn.Font = Enum.Font.SourceSansBold
	backBtn.TextSize = 14
	backBtn.Text = "‚Üê Go Back"
	backBtn.Parent = pad
	backBtn.LayoutOrder = 0 
	Instance.new("UICorner", backBtn).CornerRadius = UDim.new(0, 6)

	local startBtn = Instance.new("TextButton")
    startBtn.Name = "Start Auto-Farm" -- Give it a name to find later
	startBtn.Size = UDim2.new(0, 220, 0, 38)
	startBtn.BackgroundColor3 = Color3.fromRGB(50,50,60)
	startBtn.TextColor3 = Color3.new(1,1,1)
	startBtn.Font = Enum.Font.SourceSansBold
	startBtn.TextSize = 16
	startBtn.Text = "Start Auto-Farm"
	startBtn.Parent = pad
	Instance.new("UICorner", startBtn).CornerRadius = UDim.new(0,6)

	local timeLabel = Instance.new("TextLabel")
	timeLabel.Size = UDim2.new(0, 220, 0, 30)
	timeLabel.BackgroundColor3 = Color3.fromRGB(35,35,40)
	timeLabel.TextColor3 = Color3.new(1,1,1)
	timeLabel.Font = Enum.Font.SourceSansBold
	timeLabel.TextSize = 14
	timeLabel.Text = "Time: 0s"
	timeLabel.Parent = pad
	Instance.new("UICorner", timeLabel).CornerRadius = UDim.new(0,6)

	local partsLabel = Instance.new("TextLabel")
	partsLabel.Size = UDim2.new(0, 220, 0, 30)
	partsLabel.BackgroundColor3 = Color3.fromRGB(35,35,40)
	partsLabel.TextColor3 = Color3.new(1,1,1)
	partsLabel.Font = Enum.Font.SourceSansBold
	partsLabel.TextSize = 14
	partsLabel.Text = "Parts Teleported To: 0"
	partsLabel.Parent = pad
	Instance.new("UICorner", partsLabel).CornerRadius = UDim.new(0,6)

	local speedBox = Instance.new("TextBox")
	speedBox.Size = UDim2.new(0, 220, 0, 32)
	speedBox.BackgroundColor3 = Color3.fromRGB(45,45,50)
	speedBox.TextColor3 = Color3.new(1,1,1)
	speedBox.Font = Enum.Font.SourceSans
	speedBox.PlaceholderText = "Speed For Tween (0 - 1)"
	speedBox.Text = "0.1"
	speedBox.ClearTextOnFocus = false
	speedBox.TextScaled = false
	speedBox.TextSize = 14 
	speedBox.Parent = pad
	Instance.new("UICorner", speedBox).CornerRadius = UDim.new(0,6)

	local delayBox = Instance.new("TextBox")
	delayBox.Size = UDim2.new(0, 220, 0, 32)
	delayBox.BackgroundColor3 = Color3.fromRGB(45,45,50)
	delayBox.TextColor3 = Color3.new(1,1,1)
	delayBox.Font = Enum.Font.SourceSans
	delayBox.PlaceholderText = "Stay Put Delay (0 - 1)"
	delayBox.Text = "0"
	delayBox.ClearTextOnFocus = false
	delayBox.TextScaled = false
	delayBox.TextSize = 14 
	delayBox.Parent = pad
	Instance.new("UICorner", delayBox).CornerRadius = UDim.new(0,6)

	-- Wire up controls -> Candy core
	local function formatTime(sec)
		sec = math.max(0, math.floor(sec or 0))
		local s = sec % 60
		local m = math.floor(sec / 60) % 60
		local h = math.floor(sec / 3600)
		if h > 0 then
			return string.format("%02d:%02d:%02d", h, m, s)
		else
			return string.format("%02d:%02d", m, s)
		end
	end

	local uiUpdateConn
	local function startUIUpdater()
		if uiUpdateConn then return end
		uiUpdateConn = RunService.Heartbeat:Connect(function()
			if Candy.IsRunning() then
				local t = Candy.GetStopwatch() or 0
                if timeLabel and timeLabel.Parent then -- Check exists
				    timeLabel.Text = "Time: " .. formatTime(t)
                end
                if partsLabel and partsLabel.Parent then -- Check exists
				    partsLabel.Text = "Parts Teleported To: " .. tostring(Candy.GetVisited())
                end
			end
		end)
	end

	local function stopUIUpdater()
		if uiUpdateConn then
			uiUpdateConn:Disconnect()
			uiUpdateConn = nil
		end
	end

	-- Start/Stop toggle behavior
	startBtn.MouseButton1Click:Connect(function()
		if not Candy.IsRunning() then
			local sp = tonumber(speedBox.Text) or tonumber(speedBox.PlaceholderText) or 0.1
			local sd = tonumber(delayBox.Text) or tonumber(delayBox.PlaceholderText) or 0
			sp = math.clamp(sp, 0, 1)
			sd = math.clamp(sd, 0, 1)
			Candy.SetTweenSpeed(sp)
			Candy.SetStayDelay(sd)
			Candy.Start()
			startBtn.Text = "Stop Auto-Farm"
			timeLabel.Text = "Time: 00:00"
			partsLabel.Text = "Parts Teleported To: 0"
			startUIUpdater()
		else
			Candy.Stop()
			startBtn.Text = "Start Auto-Farm"
			-- Don't reset labels immediately, let the final count show
             task.delay(0.1, function()
                 if timeLabel and timeLabel.Parent then timeLabel.Text = "Time: 00:00" end
                 if partsLabel and partsLabel.Parent then partsLabel.Text = "Parts Teleported To: " .. tostring(Candy.GetVisited()) end
             end)
			stopUIUpdater()
		end
	end)

	-- Validate and clamp inputs when editing finished
	local function clampTextBoxInput(tb, default, setterFunc)
		tb.FocusLost:Connect(function(enterPressed)
			local val = tonumber(tb.Text)
			if not val then
				val = default -- Use default if invalid
			end
			val = math.clamp(val, 0, 1) -- Clamp regardless
			tb.Text = tostring(val) -- Update text box
            setterFunc(val) -- Call the setter function (Candy.SetTweenSpeed or Candy.SetStayDelay)
		end)
	end

	clampTextBoxInput(speedBox, 0.1, Candy.SetTweenSpeed)
	clampTextBoxInput(delayBox, 0, Candy.SetStayDelay)
	
	-- Wire up main launcher
	candyLauncher.MouseButton1Click:Connect(function()
		if panelOpen then
			closePanel()
		else
			openPanel()
		end
	end)
	backBtn.MouseButton1Click:Connect(closePanel)

	-- Ensure UI updater stops if GUI is destroyed
	ScreenGui.AncestryChanged:Connect(function(_, parent)
		if not parent then
			stopUIUpdater()
            -- Also ensure Candy farm stops if GUI is removed
            if Candy.IsRunning() then Candy.Stop() end
		end
	end)

	task.spawn(function()
		while ScreenGui and ScreenGui.Parent do -- Check ScreenGui exists
            if not Candy.IsRunning() and partsLabel and partsLabel.Parent then -- Check partsLabel exists
			    pcall(function() partsLabel.Text = "Parts Teleported To: " .. tostring(Candy.GetVisited()) end) 
            end
			task.wait(0.5)
		end
	end)

	-- Keep slidePanel positioned correctly regarding size when MainFrame resizes
	MainFrame:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
		local newWidth = math.floor(MainFrame.AbsoluteSize.X * 0.6)
		if slidePanel then slidePanel.Size = UDim2.new(0, newWidth, 1, -TITLE_BAR_HEIGHT) end
        -- If open, reposition immediately
        if panelOpen and slidePanel then
             slidePanel.Position = UDim2.new(0, 0, 0, TITLE_BAR_HEIGHT)
        end
	end)
end


-- =======================================================================================
-- 5. Fun / Miscellaneous Panel (RIGHT Slide) Setup
-- =======================================================================================
do
	local funPanelWidth = math.floor( (MainFrame.AbsoluteSize.X) * 0.6 ) 
	FunPanel = Instance.new("Frame") -- Assign
	FunPanel.Name = "FunMiscellaneousPanel" 
	FunPanel.BackgroundColor3 = Color3.fromRGB(20, 20, 24)
	FunPanel.Size = UDim2.new(0, funPanelWidth, 1, -TITLE_BAR_HEIGHT)
	FunPanel.Position = UDim2.new(1, 0, 0, TITLE_BAR_HEIGHT)
	FunPanel.BorderSizePixel = 0
	FunPanel.ClipsDescendants = true
	FunPanel.Parent = MainFrame
	Instance.new("UICorner", FunPanel).CornerRadius = UDim.new(0, 8)

	-- inner padding frame
	local funPad = Instance.new("Frame") 
    funPad.Name = "funPad"
	funPad.Size = UDim2.new(1, -16, 1, -16)
	funPad.Position = UDim2.new(0, 8, 0, 8)
	funPad.BackgroundTransparency = 1
	funPad.Parent = FunPanel

	local funLayout = Instance.new("UIListLayout") 
	funLayout.Padding = UDim.new(0, 8)
	funLayout.FillDirection = Enum.FillDirection.Vertical
	funLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	funLayout.VerticalAlignment = Enum.VerticalAlignment.Top
	funLayout.Parent = funPad

	-- Go Back button
	local funBackBtn = Instance.new("TextButton") 
	funBackBtn.Size = UDim2.new(0, 220, 0, 36)
	funBackBtn.BackgroundColor3 = COLORS.TitleBar
	funBackBtn.TextColor3 = COLORS.Text
	funBackBtn.Font = Enum.Font.SourceSansBold
	funBackBtn.TextSize = 14
	funBackBtn.Text = "‚Üê Go Back" 
	funBackBtn.Parent = funPad
	funBackBtn.LayoutOrder = 0
	Instance.new("UICorner", funBackBtn).CornerRadius = UDim.new(0, 6)

	-- Brainrot Stealing button logic 
	local stealBtn = Instance.new("TextButton")
    stealBtn.Name = "Start Stealing Brainrots" -- Give it a name to find later
	stealBtn.Size = UDim2.new(0, 220, 0, 38)
	stealBtn.BackgroundColor3 = COLORS.ButtonBrainrotInactive -- Initial color
	stealBtn.TextColor3 = Color3.new(1, 1, 1)
	stealBtn.Font = Enum.Font.SourceSansBold
	stealBtn.TextSize = 16
	stealBtn.Text = "Start Stealing Brainrots" -- NEW TEXT
	stealBtn.Parent = funPad
	Instance.new("UICorner", stealBtn).CornerRadius = UDim.new(0, 6)
	stealBtn.LayoutOrder = 1

	-- Toggle functions
	local function startStealing()
		if BrainrotStealer.IsRunning() then return end
		BrainrotStealer.Start()
        if stealBtn and stealBtn.Parent then -- Check button exists
		    stealBtn.Text = "Stop Stealing Brainrots"
		    stealBtn.BackgroundColor3 = COLORS.ButtonBrainrotActive -- dark red
        end
	end

	local function stopStealing()
		if not BrainrotStealer.IsRunning() then return end
		BrainrotStealer.Stop()
         if stealBtn and stealBtn.Parent then -- Check button exists
		    stealBtn.Text = "Start Stealing Brainrots"
		    stealBtn.BackgroundColor3 = COLORS.ButtonBrainrotInactive -- dark gray/black
         end
	end

	-- Toggle button
	stealBtn.MouseButton1Click:Connect(function()
		if BrainrotStealer.IsRunning() then
			stopStealing()
		else
			startStealing()
		end
	end)

	-- Wire up main launcher and back button
	funLauncher.MouseButton1Click:Connect(function() 
		if funPanelOpen then
			closeFunPanel()
		else
			openFunPanel()
		end
	end)

	funBackBtn.MouseButton1Click:Connect(function()
        stopStealing() -- Safety stop when exiting panel
        closeFunPanel()
    end) 

	-- Keep FunPanel sized correctly if MainFrame resizes
	MainFrame:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
		local newWidth = math.floor(MainFrame.AbsoluteSize.X * 0.6)
		if FunPanel then FunPanel.Size = UDim2.new(0, newWidth, 1, -TITLE_BAR_HEIGHT) end
		if funPanelOpen and FunPanel then
			-- Reposition immediately if open
             FunPanel.Position = UDim2.new(1, -newWidth, 0, TITLE_BAR_HEIGHT)
		end
	end)
end

-- =======================================================================================
-- 6. Settings Panel (TOP Slide-Down) Setup
-- =======================================================================================
-- Helper function to get contrasting text color
local function getContrastingTextColor(color)
    -- Using luminance formula
    local luminance = (0.299 * color.R + 0.587 * color.G + 0.114 * color.B)
    if luminance > 0.5 then
        return Color3.new(0, 0, 0) -- Black text for light colors
    else
        return Color3.new(1, 1, 1) -- White text for dark colors
    end
end

-- Define ApplyTheme function before it's used in the settings panel
function ApplyTheme(newColor, isRainbow)
    -- Stop rainbow task if a new static color is applied
    if not isRainbow and rainbowThemeActive then
        rainbowThemeActive = false
        if rainbowTask then
            task.cancel(rainbowTask)
            rainbowTask = nil
        end
    end
    
    local darkerColor = newColor:Lerp(Color3.new(0,0,0), 0.3)
    local panelColor = newColor:Lerp(Color3.new(0,0,0), 0.1)
    local buttonColor = newColor:Lerp(Color3.new(0,0,0), 0.2)
    local mainButtonColor = newColor:Lerp(Color3.new(0.1, 0.1, 0.1), 0.4)
    local dropdownBgColor = panelColor:Lerp(Color3.new(0,0,0), 0.1)
    
    -- Get contrasting text color
    local textColor = getContrastingTextColor(newColor)
    local darkTextColor = getContrastingTextColor(darkerColor)
    
    -- Update global colors table
    COLORS.Main = newColor
    COLORS.TitleBar = darkerColor
    COLORS.Text = darkTextColor -- Update main text color based on title bar
    
    -- Select the tween info (fast for rainbow, normal for static)
    local tweenInfo = isRainbow and TWEEN_INFO_FAST or TWEEN_INFO
    
    -- Apply to THIS script's main frames
    if MainFrame then TweenService:Create(MainFrame, tweenInfo, {BackgroundColor3 = newColor}):Play() end
    if Content then TweenService:Create(Content, tweenInfo, {BackgroundColor3 = newColor}):Play() end
    if TitleBar then TweenService:Create(TitleBar, tweenInfo, {BackgroundColor3 = darkerColor}):Play() end
    
    -- Apply to THIS script's text
    if Title then TweenService:Create(Title, tweenInfo, {TextColor3 = darkTextColor}):Play() end
    if Label then TweenService:Create(Label, tweenInfo, {TextColor3 = textColor}):Play() end

    -- Apply to THIS script's panels (check existence)
    if slidePanel then TweenService:Create(slidePanel, tweenInfo, {BackgroundColor3 = panelColor}):Play() end
    if FunPanel then TweenService:Create(FunPanel, tweenInfo, {BackgroundColor3 = panelColor}):Play() end
    if SettingsPanel then TweenService:Create(SettingsPanel, tweenInfo, {BackgroundColor3 = panelColor}):Play() end
    
    -- Apply to THIS script's main buttons
    if candyLauncher then TweenService:Create(candyLauncher, tweenInfo, {BackgroundColor3 = mainButtonColor, TextColor3 = getContrastingTextColor(mainButtonColor)}):Play() end
    if funLauncher then TweenService:Create(funLauncher, tweenInfo, {BackgroundColor3 = mainButtonColor, TextColor3 = getContrastingTextColor(mainButtonColor)}):Play() end
    if settingsLauncher then TweenService:Create(settingsLauncher, tweenInfo, {BackgroundColor3 = mainButtonColor, TextColor3 = getContrastingTextColor(mainButtonColor)}):Play() end
    
    -- Apply to THIS script's panel back buttons (check existence)
    local candyBackBtn = slidePanel and slidePanel:FindFirstChild("pad") and slidePanel.pad:FindFirstChildOfClass("TextButton")
    local funBackBtn = FunPanel and FunPanel:FindFirstChild("funPad") and FunPanel.funPad:FindFirstChildOfClass("TextButton")
    local settingsPad = SettingsPanel and SettingsPanel:FindFirstChild("settingsPad") -- Get settingsPad first
    local settingsBackBtn = settingsPad and settingsPad:FindFirstChild("SettingsBackButton")
    local themeDropdownBtn = settingsPad and settingsPad:FindFirstChild("ThemeDropdownButton")
    local dropdownList = settingsPad and settingsPad:FindFirstChild("DropdownList")
    
    if candyBackBtn then TweenService:Create(candyBackBtn, tweenInfo, {BackgroundColor3 = darkerColor, TextColor3 = darkTextColor}):Play() end
    if funBackBtn then TweenService:Create(funBackBtn, tweenInfo, {BackgroundColor3 = darkerColor, TextColor3 = darkTextColor}):Play() end
    if settingsBackBtn then TweenService:Create(settingsBackBtn, tweenInfo, {BackgroundColor3 = darkerColor, TextColor3 = darkTextColor}):Play() end
    if themeDropdownBtn then TweenService:Create(themeDropdownBtn, tweenInfo, {BackgroundColor3 = mainButtonColor, TextColor3 = getContrastingTextColor(mainButtonColor)}):Play() end
    if dropdownList then TweenService:Create(dropdownList, tweenInfo, {BackgroundColor3 = dropdownBgColor}):Play() end

    -- Update THIS script's dropdown color buttons
    if dropdownList then
        for _, btn in ipairs(dropdownList:GetChildren()) do
            if btn:IsA("TextButton") then
                local btnBg = buttonColor:Lerp(Color3.new(1,1,1), 0.1)
                TweenService:Create(btn, tweenInfo, {BackgroundColor3 = btnBg, TextColor3 = getContrastingTextColor(btnBg)}):Play()
            end
        end
    end
    
    -- Update THIS script's Candy panel buttons (check existence)
    local startBtn = slidePanel and slidePanel:FindFirstChild("pad") and slidePanel.pad:FindFirstChild("Start Auto-Farm")
    if startBtn then TweenService:Create(startBtn, tweenInfo, {BackgroundColor3 = buttonColor, TextColor3 = getContrastingTextColor(buttonColor)}):Play() end
    
    -- Update THIS script's Fun panel buttons (check existence)
    local stealBtn = FunPanel and FunPanel:FindFirstChild("funPad") and FunPanel.funPad:FindFirstChild("Start Stealing Brainrots")
    if stealBtn then
        -- Only update color if inactive
        if not BrainrotStealer.IsRunning() then
            COLORS.ButtonBrainrotInactive = buttonColor:Lerp(Color3.new(0,0,0), 0.2)
            TweenService:Create(stealBtn, tweenInfo, {BackgroundColor3 = COLORS.ButtonBrainrotInactive, TextColor3 = getContrastingTextColor(COLORS.ButtonBrainrotInactive)}):Play()
        else -- Update active color slightly too
             COLORS.ButtonBrainrotActive = buttonColor:Lerp(Color3.fromRGB(255,0,0), 0.5) -- Make active color derived but still reddish
             TweenService:Create(stealBtn, tweenInfo, {BackgroundColor3 = COLORS.ButtonBrainrotActive, TextColor3 = getContrastingTextColor(COLORS.ButtonBrainrotActive)}):Play()
        end
    end

    -- ***** APPLY TO ALL OTHER GUIs *****
    pcall(function() -- Wrap in pcall to prevent errors from affecting the main GUI
        for _, guiObj in ipairs(PlayerGui:GetDescendants()) do
            -- Skip elements that are part of this script's main GUI to avoid conflicts
            if not guiObj:IsDescendantOf(MainFrame) then 
                local handled = false -- Flag to check if color was applied
                
                -- Apply Background Color (with transparency for frames)
                if guiObj:IsA("Frame") or guiObj:IsA("ScrollingFrame") or guiObj:IsA("ImageLabel") or guiObj:IsA("ImageButton") then
                    TweenService:Create(guiObj, tweenInfo, {BackgroundColor3 = newColor, BackgroundTransparency = TRANSPARENCY}):Play()
                    handled = true
                elseif guiObj:IsA("TextButton") then -- TextButtons often need background + text color
                     TweenService:Create(guiObj, tweenInfo, {BackgroundColor3 = buttonColor, TextColor3 = getContrastingTextColor(buttonColor)}):Play()
                     handled = true -- Count TextButton background as handled
                end

                -- Apply Text Color
                if guiObj:IsA("TextLabel") or guiObj:IsA("TextButton") or guiObj:IsA("TextBox") then
                    -- Don't override TextButton color if background was already handled above
                     if not (guiObj:IsA("TextButton") and handled) then 
                        TweenService:Create(guiObj, tweenInfo, {TextColor3 = textColor}):Play()
                     end
                end
            end
        end
    end)
end

-- Function to start the rainbow theme
local function StartRainbowTheme()
    if rainbowThemeActive then return end -- Already running
    rainbowThemeActive = true
    
    rainbowTask = task.spawn(function()
        local hue = 0
        while rainbowThemeActive do
            hue = (hue + 0.01) % 1
            local color = Color3.fromHSV(hue, 1, 1)
            ApplyTheme(color, true) -- Pass true for isRainbow
            task.wait(0.1)
        end
    end)
end

do
	SettingsPanel = Instance.new("Frame") -- Assign
	SettingsPanel.Name = "SettingsPanel" 
	SettingsPanel.BackgroundColor3 = Color3.fromRGB(20, 20, 24)
	SettingsPanel.Size = UDim2.new(1, 0, 0, 0) -- Starts with 0 height
	SettingsPanel.Position = UDim2.new(0, 0, 0, TITLE_BAR_HEIGHT) -- Positioned right under title bar
	SettingsPanel.BorderSizePixel = 0
	SettingsPanel.ClipsDescendants = false -- Allow dropdown to show outside bounds
	SettingsPanel.ZIndex = 3 -- Needs to be above the Content frame (ZIndex 1)
	SettingsPanel.Parent = MainFrame
	Instance.new("UICorner", SettingsPanel).CornerRadius = UDim.new(0, 8)

	-- ===================================================
    -- Main Settings View (settingsPad)
    -- ===================================================
	local settingsPad = Instance.new("Frame") 
    settingsPad.Name = "settingsPad"
	settingsPad.Size = UDim2.new(1, -16, 1, -16) -- Padding
	settingsPad.Position = UDim2.new(0, 8, 0, 8)
	settingsPad.BackgroundTransparency = 1
    settingsPad.ClipsDescendants = false -- Allow dropdown to show outside bounds
    settingsPad.ZIndex = 5 -- Above SettingsPanel background, below dropdown list
	settingsPad.Parent = SettingsPanel

	local settingsLayout = Instance.new("UIListLayout") 
	settingsLayout.Padding = UDim.new(0, 8)
	settingsLayout.FillDirection = Enum.FillDirection.Vertical
	settingsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	settingsLayout.VerticalAlignment = Enum.VerticalAlignment.Top
    settingsLayout.Padding = UDim.new(0, 15) -- Add padding for spacing
	settingsLayout.Parent = settingsPad

	-- Go Back button (Closes entire Settings Panel)
	local settingsBackBtn = Instance.new("TextButton") 
	settingsBackBtn.Name = "SettingsBackButton" -- For guiElements list
	settingsBackBtn.Size = UDim2.new(0, 220, 0, 36)
	settingsBackBtn.BackgroundColor3 = COLORS.TitleBar
	settingsBackBtn.TextColor3 = COLORS.Text
	settingsBackBtn.Font = Enum.Font.SourceSansBold
	settingsBackBtn.TextSize = 14
	settingsBackBtn.Text = "‚Üë Close Settings" 
	settingsBackBtn.Parent = settingsPad
	settingsBackBtn.LayoutOrder = 0
	Instance.new("UICorner", settingsBackBtn).CornerRadius = UDim.new(0, 6)
    
    -- Color Theme button (Opens Dropdown)
    local themeDropdownBtn = Instance.new("TextButton")
    themeDropdownBtn.Name = "ThemeDropdownButton"
    themeDropdownBtn.Size = UDim2.new(0, 220, 0, 36)
    themeDropdownBtn.BackgroundColor3 = COLORS.TitleBar -- Use TitleBar color for consistency
    themeDropdownBtn.TextColor3 = COLORS.Text
    themeDropdownBtn.Font = Enum.Font.SourceSansBold
    themeDropdownBtn.TextSize = 14
    themeDropdownBtn.Text = "Change Theme / Color V"
    themeDropdownBtn.Parent = settingsPad
    themeDropdownBtn.LayoutOrder = 1
    Instance.new("UICorner", themeDropdownBtn).CornerRadius = UDim.new(0, 6)
    
    -- Add the buttons to the main guiElements list for fade-out
    table.insert(guiElements, settingsBackBtn)
    table.insert(guiElements, themeDropdownBtn)

    -- ===================================================
    -- Color Dropdown List
    -- ===================================================
    local dropdownList = Instance.new("Frame")
    dropdownList.Name = "DropdownList"
    dropdownList.Size = UDim2.new(0, 220, 0, 0) -- Starts closed
    --dropdownList.Position = UDim2.fromOffset(0, 36 + 15) -- Positioned right below the button (36 height + 15 padding) - Offset only
    dropdownList.AnchorPoint = Vector2.new(0.5, 0) -- Anchor top-center
    -- Calculate position based on layout order: Back Button (36) + Padding (15) + Theme Button (36) + Padding (8) = 95
    dropdownList.Position = UDim2.new(0.5, 0, 0, 36 + 15 + 36 + 8) 
    
    dropdownList.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
    dropdownList.BorderSizePixel = 0
    dropdownList.BackgroundTransparency = 0
    dropdownList.ClipsDescendants = true
    dropdownList.Visible = false -- Hidden by default
    dropdownList.ZIndex = 10 -- On top of everything
    dropdownList.Parent = settingsPad -- Parent to pad
    Instance.new("UICorner", dropdownList).CornerRadius = UDim.new(0, 6)
    
    local dropdownLayout = Instance.new("UIListLayout")
    dropdownLayout.Padding = UDim.new(0, 5)
    dropdownLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    dropdownLayout.SortOrder = Enum.SortOrder.LayoutOrder
    dropdownLayout.Parent = dropdownList
    
    local colorPresets = {
        {"Red", Color3.fromRGB(255, 0, 0)},
        {"Blue", Color3.fromRGB(0, 100, 255)},
        {"Yellow", Color3.fromRGB(255, 255, 0)},
        {"Green", Color3.fromRGB(0, 255, 0)},
        {"Purple", Color3.fromRGB(128, 0, 128)},
        {"Orange", Color3.fromRGB(255, 165, 0)},
        {"Cyan", Color3.fromRGB(0, 255, 255)},
        {"White", Color3.fromRGB(255, 255, 255)},
        {"RGB / Rainbow", nil} -- Nil color indicates special function
    }
    
    local DROPDOWN_ITEM_HEIGHT = 30
    local DROPDOWN_PADDING = 5
    local totalHeight = (#colorPresets * DROPDOWN_ITEM_HEIGHT) + ((#colorPresets - 1) * DROPDOWN_PADDING) + (DROPDOWN_PADDING * 2) -- Add padding top/bottom
    
    -- Add top padding
    local topPad = Instance.new("Frame")
    topPad.Size = UDim2.new(1, 0, 0, DROPDOWN_PADDING)
    topPad.BackgroundTransparency = 1
    topPad.LayoutOrder = 0
    topPad.Parent = dropdownList

    for i, preset in ipairs(colorPresets) do
        local name = preset[1]
        local color = preset[2]
        
        local colorBtn = Instance.new("TextButton")
        colorBtn.Name = name
        colorBtn.Size = UDim2.new(1, -10, 0, DROPDOWN_ITEM_HEIGHT) -- Use scale with offset for padding
        colorBtn.BackgroundColor3 = COLORS.TitleBar:Lerp(Color3.new(1,1,1), 0.1)
        colorBtn.TextColor3 = COLORS.Text
        colorBtn.Font = Enum.Font.SourceSans
        colorBtn.TextSize = 14
        colorBtn.Text = name
        colorBtn.LayoutOrder = i -- Use loop index for order
        colorBtn.Parent = dropdownList
        Instance.new("UICorner", colorBtn).CornerRadius = UDim.new(0, 4)
        table.insert(guiElements, colorBtn) -- Add to fade list
        
        colorBtn.MouseButton1Click:Connect(function()
            if name == "RGB / Rainbow" then
                StartRainbowTheme()
            else
                ApplyTheme(color, false) -- Pass false for isRainbow
            end
            -- Close dropdown
            dropdownList:TweenSize(UDim2.new(0, 220, 0, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true, function()
                 if dropdownList and dropdownList.Parent then dropdownList.Visible = false end -- Add check
                 if themeDropdownBtn and themeDropdownBtn.Parent then themeDropdownBtn.Text = "Change Theme / Color V" end -- Reset arrow
            end)
        end)
    end
    
    -- Add bottom padding
    local bottomPad = Instance.new("Frame")
    bottomPad.Size = UDim2.new(1, 0, 0, DROPDOWN_PADDING)
    bottomPad.BackgroundTransparency = 1
    bottomPad.LayoutOrder = #colorPresets + 1
    bottomPad.Parent = dropdownList

    -- ===================================================
    -- Settings Panel Wiring
    -- ===================================================

	-- Wire up main launcher and settings back button
	settingsLauncher.MouseButton1Click:Connect(function() 
		if settingsPanelOpen then
			closeSettingsPanel()
		else
			openSettingsPanel()
		end
	end)

	settingsBackBtn.MouseButton1Click:Connect(closeSettingsPanel) 
    
    -- Wire up dropdown toggle
    themeDropdownBtn.MouseButton1Click:Connect(function()
        if dropdownList.Visible then
            -- Close it
            dropdownList:TweenSize(UDim2.new(0, 220, 0, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true, function()
                if dropdownList and dropdownList.Parent then dropdownList.Visible = false end -- Add check
                themeDropdownBtn.Text = "Change Theme / Color V" -- Update arrow
            end)
        else
            -- Open it
            dropdownList.Visible = true
            dropdownList:TweenSize(UDim2.new(0, 220, 0, totalHeight), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true)
            themeDropdownBtn.Text = "Change Theme / Color ^" -- Update arrow
        end
    end)

	-- Keep SettingsPanel sized correctly if MainFrame resizes
	MainFrame:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
		if settingsPanelOpen and SettingsPanel then
			-- If it's open, just maintain the full-size-minus-title-bar
            SettingsPanel.Size = UDim2.new(1, 0, 1, -TITLE_BAR_HEIGHT)
		end
	end)
end
